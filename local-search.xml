<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AP java - De Morgan&#39;s Laws</title>
    <link href="/2020/11/21/AP-java-De-Morgan-s-Laws/"/>
    <url>/2020/11/21/AP-java-De-Morgan-s-Laws/</url>
    
    <content type="html"><![CDATA[<p>The famous De Morgan’s laws was developed by Augustus De Morgan in the 1800s, he was a indian born mathmatician and logician. And heres how the law applies in ap java</p><h1 id="De-Morgan’s-Laws"><a href="#De-Morgan’s-Laws" class="headerlink" title="De Morgan’s Laws"></a>De Morgan’s Laws</h1><h3 id="Distrubuting-the-NOT-operator"><a href="#Distrubuting-the-NOT-operator" class="headerlink" title="Distrubuting the ! (NOT) operator"></a>Distrubuting the <code>!</code> (NOT) operator</h3><p>TL;DR</p><pre><code class="hljs asciidoc">&amp;&amp; becomes |||| becomes &amp;&amp;&lt; becomes &gt;=&gt; becomes &lt;=&lt;= becomes &gt;&gt;= becomes &lt;<span class="hljs-section">== becomes !=</span>!= becomes ==</code></pre><h5 id="AND-amp-OR-operators"><a href="#AND-amp-OR-operators" class="headerlink" title="AND &amp; OR operators"></a>AND &amp; OR operators</h5><p>Here’s an example:</p><pre><code class="hljs gcode">!<span class="hljs-comment">(A &amp;&amp; B)</span></code></pre><p>According to De Morgan’s law, it’s the same as the following.</p><pre><code class="hljs erlang-repl">!A || !B</code></pre><p>Remember that you’ll have to change it from OR to AND to make this true</p><h5 id="Bigger-than-amp-smaller-than"><a href="#Bigger-than-amp-smaller-than" class="headerlink" title="Bigger than &amp; smaller than"></a>Bigger than &amp; smaller than</h5><pre><code class="hljs gcode">!<span class="hljs-comment">(A &gt; B)</span></code></pre><p>According to De Morgan’s law, it’s the same as the following.</p><pre><code class="hljs dns"><span class="hljs-keyword">A</span> &lt;= B</code></pre><p>Note that the <code>!</code> operator made the sign inclusive, since <code>&gt;</code> is exclusive.</p><h5 id="Double-equals"><a href="#Double-equals" class="headerlink" title="Double equals"></a>Double equals</h5><pre><code class="hljs gcode">!<span class="hljs-comment">(A == B)</span></code></pre><p>this one should be pretty obvious and simple</p><pre><code class="hljs dns"><span class="hljs-keyword">A</span> != b</code></pre><p>the opposite of <code>==</code> would be <code>!=</code></p><h3 id="In-the-context-of-java"><a href="#In-the-context-of-java" class="headerlink" title="In the context of java"></a>In the context of java</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeMorgan</span></span><span class="hljs-class"></span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><span class="hljs-function">   </span>&#123;     <span class="hljs-keyword">int</span> x = <span class="hljs-number">6</span>;     <span class="hljs-keyword">int</span> y = <span class="hljs-number">9</span>; <span class="hljs-comment">//very nice haha so funny</span>     System.out.println(!((x &lt; <span class="hljs-number">9</span>) &amp;&amp; y &gt; <span class="hljs-number">6</span>));   &#125;&#125;</code></pre><p>Let’s take a look at the logic part</p><pre><code class="hljs gcode">!<span class="hljs-comment">((x &lt; 9)</span> &amp;&amp; <span class="hljs-comment">(y &gt; 6)</span>)</code></pre><p>Using De Morgan’s laws, it would be the same as the following</p><pre><code class="hljs erlang-repl">!(x &lt; <span class="hljs-number">9</span>) || !(y &gt; <span class="hljs-number">6</span>)</code></pre><p>Now, apply the laws on them</p><pre><code class="hljs apache"><span class="hljs-attribute">x</span> &gt;= <span class="hljs-number">9</span> || y &lt;= <span class="hljs-number">6</span></code></pre><p>After that, plug in the values for each variables</p><pre><code class="hljs java"><span class="hljs-keyword">int</span> x = <span class="hljs-number">6</span>;<span class="hljs-keyword">int</span> y = <span class="hljs-number">9</span>; <span class="hljs-comment">//very nice haha so funny</span>System.out.println(x &gt;= <span class="hljs-number">9</span> || y &lt;= <span class="hljs-number">6</span>);</code></pre><p>Since x is not bigger or equal to 9, or y is smaller or equal to 6, the answer should yield <code>false</code> </p><p>Let’s try running it</p><pre><code class="hljs awk">falseProcess finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">0</span></code></pre><p>EOF<br>icanc.space</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>deploying a minecraft server with docker</title>
    <link href="/2020/11/20/deploying-a-minecraft-server-with-docker/"/>
    <url>/2020/11/20/deploying-a-minecraft-server-with-docker/</url>
    
    <content type="html"><![CDATA[<p>this guide will help you go through the process of installing minecraft server on a raspberry pi. its multiplatform and has support for server types</p><h2 id="deploying-a-minecraft-server-with-docker"><a href="#deploying-a-minecraft-server-with-docker" class="headerlink" title="deploying a minecraft server with docker"></a>deploying a minecraft server with docker</h2><h2 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h2><p>for those people that hates docker,<br>you can follow this guide: <a href="https://pimylifeup.com/raspberry-pi-minecraft-server/">https://pimylifeup.com/raspberry-pi-minecraft-server/</a></p><p>but why docker?</p><ol><li>no need to install java and mess with jre</li><li>automation with docker is much easier</li><li>fast deployments</li></ol><h3 id="setting-up-docker"><a href="#setting-up-docker" class="headerlink" title="setting up docker"></a>setting up docker</h3><p>for arch based distros</p><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo pacman -S docker</span></code></pre><p>for debian based distros</p><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> docker</code></pre><h3 id="installing-minecraft-docker"><a href="#installing-minecraft-docker" class="headerlink" title="installing minecraft docker"></a>installing minecraft docker</h3><p>tl;dr:<br>copy the command and connect through port 25565 a few min later</p><pre><code class="hljs routeros">sudo docker <span class="hljs-builtin-name">run</span> -d -it -e <span class="hljs-attribute">EULA</span>=<span class="hljs-literal">TRUE</span> -e <span class="hljs-attribute">VERSION</span>=1.16.1 -e <span class="hljs-attribute">TYPE</span>=paper  -p 25565:25565 --name minecraft-server itzg/minecraft-server:multiarch</code></pre><p>note: ARM based board like the raspberry pi requires the multiarch tag. This command will also not mount the volumes, look at the mounting volumes section for help</p><p>why you SHOULD use docker for this</p><ol><li>no more messing with command line after this.</li><li>easy management through web interface using portainer.</li><li>want to start a server in seconds</li><li>less hassle with managing ports</li></ol><p>why you SHOULDN’T use docker for this</p><ol><li>pushing you pi for absolute performance.</li><li>no other reason why you would’nt want to use docker.</li></ol><h3 id="how-to-mount-values"><a href="#how-to-mount-values" class="headerlink" title="how to mount values"></a>how to mount values</h3><pre><code class="hljs haskell"><span class="hljs-title">minecraft</span>├── config├── <span class="hljs-class"><span class="hljs-keyword">data</span></span>└── mods</code></pre><p>this docker image requires 3 mountpoints without installing external modpacks</p><pre><code class="hljs gradle">sudo docker run -d -it -e EULA=<span class="hljs-keyword">TRUE</span> -e VERSION=<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span> -e TYPE=paper -p <span class="hljs-number">25565</span>:<span class="hljs-number">25565</span> -v <span class="hljs-regexp">/home/u</span>sername<span class="hljs-regexp">/minecraft/</span>config:<span class="hljs-regexp">/config -v /</span>home<span class="hljs-regexp">/username/mi</span>necraft<span class="hljs-regexp">/data:/</span>data -v <span class="hljs-regexp">/home/u</span>sername<span class="hljs-regexp">/minecraft/m</span>ods:<span class="hljs-regexp">/mods --name mc-container-name itzg/mi</span>necraft-server:multiarch</code></pre><p>using the <code>-v</code> argument, you can mount the path inside of docker, and u can access the server files outside of docker. but you do need to restart the container everytime u make changes.</p><p>not finished</p><p>icanc.space<br>EOF</p>]]></content>
    
    
    
    <tags>
      
      <tag>tech</tag>
      
      <tag>minecraft</tag>
      
      <tag>server</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
